{"version":3,"sources":["firebase/Config.js","contexts/AuthContext.js","contexts/TodoContext.js","components/Navbar.js","components/Login.js","components/EditTodoForm.js","components/TodoDetails.js","components/NewTodoForm.js","components/TodoList.js","components/Signup.js","App.js","serviceWorker.js","index.js"],"names":["firebaseApp","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","db","firestore","auth","AuthContext","createContext","AuthContextProvider","props","useState","currentUser","setCurrentUser","loginErrorMessage","setLoginErrorMessage","signupErrorMessage","setSignupErrorMessage","useEffect","onAuthStateChanged","removeErorMsg","Provider","value","login","email","password","signInWithEmailAndPassword","catch","e","message","logout","signOut","then","signup","name","createUserWithEmailAndPassword","cred","user","updateProfile","displayName","children","TodoContext","TodoContextProvider","useContext","loadingList","setLoadingList","todos","setTodos","loggedInUserId","uid","collectionGroup","where","orderBy","onSnapshot","querySnapshot","list","forEach","doc","data","content","isCompleted","isEditing","timeStamp","push","id","addTodo","collection","add","Date","now","deleteTodo","delete","toggleTodoStatus","currentTask","find","todo","toggleCompleted","update","toggleEdit","editTodo","Navbar","className","onClick","to","icon","faDoorOpen","title","length","Login","setEmail","setPassword","onSubmit","preventDefault","required","type","autoComplete","placeholder","onChange","target","EditTodo","prevContent","setTodo","handleSubmit","trim","onBlur","TodoDetails","faCheck","faTrashAlt","EditTodoForm","faEdit","NewTodoForm","setContent","TodoList","map","key","Signup","setName","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.700aa3ff.chunk.js","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/firebase-auth';\nimport 'firebase/firebase-firestore';\n\nconst firebaseApp = firebase.initializeApp({\n  apiKey: \"AIzaSyD2VKw7XF3b2vRFzhUXBLCrQ8HInxwv1Ww\",\n  authDomain: \"todo-hooks-53a9a.firebaseapp.com\",\n  databaseURL: \"https://todo-hooks-53a9a.firebaseio.com\",\n  projectId: \"todo-hooks-53a9a\",\n  storageBucket: \"todo-hooks-53a9a.appspot.com\",\n  messagingSenderId: \"646656220454\",\n  appId: \"1:646656220454:web:cae34273193cd37b5875e7\",\n  measurementId: \"G-8NJGJ76DFD\"\n});\n\nconst db = firebaseApp.firestore();\nconst auth = firebaseApp.auth();\n\nexport {db, auth};\n","import React, { createContext, useState, useEffect } from \"react\";\nimport { auth } from \"../firebase/Config\";\n\nexport const AuthContext = createContext();\n\nconst AuthContextProvider = props => {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loginErrorMessage, setLoginErrorMessage] = useState(null);\n  const [signupErrorMessage, setSignupErrorMessage] = useState(null);\n\n  useEffect(() => {\n    auth.onAuthStateChanged(currentUser => {\n      if (currentUser) {\n        setCurrentUser(currentUser);\n        removeErorMsg();\n      } else {\n        setCurrentUser(null);\n      }\n    });\n  }, []);\n\n  const login = (email, password) => {\n    auth\n      .signInWithEmailAndPassword(email, password)\n      .catch(e => setLoginErrorMessage(e.message));\n  };\n\n  const signup = (name, email, password) => {\n    auth.createUserWithEmailAndPassword(email, password).then(cred => {\n      cred.user\n        .updateProfile({\n          displayName: name\n        })\n    }).catch(e => setSignupErrorMessage(e.message))\n  };\n\n  const logout = () => {\n    auth.signOut().then(() => setCurrentUser(null));\n  };\n\n  const removeErorMsg = () => {\n    return (setLoginErrorMessage(null), setSignupErrorMessage(null));\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        currentUser,\n        login,\n        logout,\n        signup,\n        loginErrorMessage,\n        signupErrorMessage,\n        setLoginErrorMessage,\n        setSignupErrorMessage\n      }}\n    >\n      {props.children}\n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthContextProvider;\n","import React, { createContext, useState, useEffect, useContext } from \"react\";\nimport { db } from \"../firebase/Config\";\nimport { AuthContext } from \"../contexts/AuthContext\";\n\nexport const TodoContext = createContext();\n\nconst TodoContextProvider = props => {\n  const { currentUser } = useContext(AuthContext);\n  const [loadingList, setLoadingList] = useState(true);\n  const [todos, setTodos] = useState([]);\n\n  useEffect(() => {\n    if (currentUser) {\n      const loggedInUserId = currentUser.uid;\n      const loggedInUserTodos = db\n        .collectionGroup(\"todos\")\n        .where(\"user\", \"==\", loggedInUserId);\n      return loggedInUserTodos\n        .orderBy(\"timeStamp\")\n        .onSnapshot(querySnapshot => {\n          const list = [];\n          querySnapshot.forEach(doc => {\n            const { content, isCompleted, isEditing, timeStamp } = doc.data();\n            list.push({\n              id: doc.id,\n              content,\n              isCompleted,\n              isEditing,\n              timeStamp\n            });\n          });\n\n          setTodos(list);\n\n          if (loadingList) {\n            setLoadingList(false);\n          }\n        });\n    }\n  }, [currentUser, loadingList]);\n\n  const addTodo = (content, user) => {\n    db.collection(\"todos\").add({\n      content,\n      isCompleted: false,\n      isEditing: false,\n      timeStamp: Date.now(),\n      user\n    });\n  };\n\n  const deleteTodo = id => {\n    db.collection(\"todos\")\n      .doc(id)\n      .delete();\n  };\n\n  const toggleTodoStatus = id => {\n    const currentTask = todos.find(todo => todo.id === id);\n    const toggleCompleted = (currentTask.isCompleted = !currentTask.isCompleted);\n    db.collection(\"todos\")\n      .doc(id)\n      .update({\n        isCompleted: toggleCompleted\n      });\n  };\n\n  const toggleEdit = id => {\n    const currentTask = todos.find(todo => todo.id === id);\n    setTodos([...todos], (currentTask.isEditing = !currentTask.isEditing));\n  };\n\n  const editTodo = (content, id) => {\n    db.collection(\"todos\")\n      .doc(id)\n      .update({\n        content: content,\n        isEditing: false\n      });\n  };\n\n  return (\n    <TodoContext.Provider\n      value={{\n        todos,\n        addTodo,\n        deleteTodo,\n        toggleTodoStatus,\n        toggleEdit,\n        editTodo,\n        loadingList\n      }}\n    >\n      {props.children}\n    </TodoContext.Provider>\n  );\n};\n\nexport default TodoContextProvider;\n","import React, { useContext } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { AuthContext } from \"../contexts/AuthContext\";\nimport { TodoContext } from '../contexts/TodoContext';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faDoorOpen } from \"@fortawesome/free-solid-svg-icons\";\n\nconst Navbar = () => {\n  const { currentUser, logout } = useContext(AuthContext);\n  const { todos } = useContext(TodoContext);\n\n  return (\n    <nav>\n      <div className='hook__left'></div>\n      <div className='hook__right'></div>\n      <div className='hook__left-dot'></div>\n      <div className='hook__right-dot'></div>\n      <div className='hook__mask'></div>\n      <h1>Todo-app with React Hooks</h1>\n      {currentUser ? (\n        <div>\n          <ul>\n            <li onClick={()=> logout()}><NavLink to='/'><FontAwesomeIcon icon={faDoorOpen} className=\"log-out\" title='log out' /></NavLink></li>\n          </ul>\n          <p className='info-bar'>Hi, {currentUser.displayName} you have {todos.length} tasks on your list</p>\n        </div>\n        ) : (\n          null\n        )\n      }\n    </nav>\n  );\n};\n\nexport default Navbar;\n","import React, { useContext, useState, useEffect } from \"react\";\nimport { AuthContext } from \"../contexts/AuthContext\";\nimport { Redirect } from \"react-router-dom\";\nimport { NavLink } from \"react-router-dom\";\n\nconst Login = () => {\n  const {\n    login,\n    loginErrorMessage,\n    setLoginErrorMessage,\n    currentUser\n  } = useContext(AuthContext);\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  const handleSignIn = e => {\n    e.preventDefault();\n    login(email, password);\n  };\n\n  useEffect(() => {\n    setLoginErrorMessage(null);\n  }, [setLoginErrorMessage]);\n\n  return currentUser ? (\n    <Redirect to=\"/\" />\n  ) : (\n    <>\n      <h2>Sign in</h2>\n      <form onSubmit={handleSignIn}>\n        <div className=\"input__container\">\n          <input\n            required\n            className=\"input\"\n            type=\"text\"\n            value={email}\n            autoComplete=\"username\"\n            placeholder=\"email\"\n            onChange={e => setEmail(e.target.value)}\n          />\n        </div>\n        <div className=\"input__container\">\n          <input\n            required\n            className=\"input\"\n            type=\"password\"\n            autoComplete=\"current-password\"\n            value={password}\n            placeholder=\"password\"\n            onChange={e => setPassword(e.target.value)}\n          />\n          <div className=\"input__error\">{loginErrorMessage}</div>\n        </div>\n        <input type=\"submit\" value=\"Login\" />\n      </form>\n      <p className=\"notification-bar\">\n        Don't have an account, yet? <NavLink to=\"signup\">Sign up</NavLink>\n      </p>\n    </>\n  );\n};\n\nexport default Login;\n","import React, { useContext, useState } from 'react';\nimport { TodoContext } from '../contexts/TodoContext';\n\n\nconst EditTodo = ({id, prevContent}) => {\n    const { editTodo } = useContext(TodoContext);\n    const [content, setTodo] = useState(prevContent)\n\n\n    const handleSubmit = e => {\n      e.preventDefault();\n      if(content.trim() !== \"\"){\n      editTodo(content, id);\n      setTodo('');\n      }\n    }\n  return (\n    <form className='todo__edit-form' onSubmit={handleSubmit} onBlur={handleSubmit}>\n      <input\n        className='input'\n        type=\"text\"\n        value={content}\n        onChange={e => setTodo(e.target.value)}>\n      </input>\n    </form>\n  );\n};\n\nexport default EditTodo;","import React, { useContext } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCheck } from \"@fortawesome/free-solid-svg-icons\";\nimport { faTrashAlt, faEdit } from \"@fortawesome/free-regular-svg-icons\";\nimport { TodoContext } from \"../contexts/TodoContext\";\nimport EditTodoForm from \"./EditTodoForm\";\n\nconst TodoDetails = ({ todo }) => {\n  const { deleteTodo, toggleTodoStatus, toggleEdit } = useContext(TodoContext);\n  return todo.isCompleted ? (\n    <li>\n      <span\n        className=\"todo__checkbox\"\n        onClick={() => toggleTodoStatus(todo.id)}\n      >\n        <FontAwesomeIcon icon={faCheck} className=\"icon\" />\n      </span>\n      <p className=\"todo__content-completed\">{todo.content}</p>\n      <span className=\"todo__option-box\">\n        <FontAwesomeIcon\n          icon={faTrashAlt}\n          className=\"icon\"\n          onClick={() => deleteTodo(todo.id)}\n        />\n      </span>\n    </li>\n  ) : (\n    <li>\n      <span\n        className=\"todo__checkbox\"\n        onClick={() => toggleTodoStatus(todo.id)}\n      ></span>\n      <span className=\"todo__content\">\n        {todo.isEditing ? (\n          <EditTodoForm id={todo.id} prevContent={todo.content} />\n        ) : (\n          <p>{todo.content}</p>\n        )}\n      </span>\n      <span className=\"todo__option-box\">\n        <FontAwesomeIcon\n          icon={faEdit}\n          className=\"icon\"\n          onClick={() => toggleEdit(todo.id)}\n        />\n      </span>\n    </li>\n  );\n};\n\nexport default TodoDetails;\n","import React, { useContext, useState } from \"react\";\nimport { TodoContext } from \"../contexts/TodoContext\";\nimport { AuthContext } from \"../contexts/AuthContext\";\n\nconst NewTodoForm = () => {\n  const { currentUser } = useContext(AuthContext);\n  const { addTodo } = useContext(TodoContext);\n  const [content, setContent] = useState(\"\");\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (content.trim() !== \"\") {\n      addTodo(content, currentUser.uid);\n      setContent(\"\");\n    }\n  };\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n      <div className='input__container'>\n        <input\n          className='input'\n          type=\"text\"\n          placeholder=\"todo\"\n          value={content}\n          onChange={e => setContent(e.target.value)}\n        />\n        </div>\n        <input type=\"submit\" value=\"Add todo\" />\n      </form>\n    </div>\n  );\n};\n\nexport default NewTodoForm;\n","import React, { useContext } from \"react\";\nimport { AuthContext } from \"../contexts/AuthContext\";\nimport { TodoContext } from \"../contexts/TodoContext\";\nimport Login from \"./Login\";\nimport TodoDetails from \"./TodoDetails\";\nimport NewTodoForm from \"./NewTodoForm\";\nimport { BeatLoader } from \"react-spinners\";\n\nconst TodoList = () => {\n  const { currentUser } = useContext(AuthContext);\n  const { todos, loadingList } = useContext(TodoContext);\n\n  return currentUser ? (\n    <>\n      <NewTodoForm />\n      {loadingList ? (\n        <BeatLoader />\n      ) : (\n        <div>\n          <ul className=\"todo-list\">\n            {todos.map(todo => {\n              return <TodoDetails todo={todo} key={todo.id} />;\n            })}\n          </ul>\n        </div>\n      )}\n    </>\n  ) : (\n    <Login />\n  );\n};\n\nexport default TodoList;\n","import React, { useContext, useState, useEffect } from \"react\";\nimport { AuthContext } from \"../contexts/AuthContext\";\nimport { Redirect } from \"react-router-dom\";\n\nconst Signup = () => {\n  const {\n    signup,\n    currentUser,\n    setSignupErrorMessage,\n    signupErrorMessage\n  } = useContext(AuthContext);\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [name, setName] = useState(\"\");\n\n  const handleSignUp = e => {\n    e.preventDefault();\n    signup(name, email, password);\n  };\n\n  useEffect(() => {\n    setSignupErrorMessage(null);\n  }, [setSignupErrorMessage]);\n\n  return currentUser ? (\n    <Redirect to=\"/\" />\n  ) : (\n    <>\n      <h2>Sign up</h2>\n      <form onSubmit={handleSignUp}>\n        <div className=\"input__container\">\n          <input\n            required\n            className=\"input\"\n            type=\"text\"\n            value={name}\n            placeholder=\"name\"\n            onChange={e => setName(e.target.value)}\n          />\n        </div>\n        <div className=\"input__container\">\n          <input\n            required\n            className=\"input\"\n            type=\"text\"\n            value={email}\n            autoComplete=\"username\"\n            placeholder=\"email\"\n            onChange={e => setEmail(e.target.value)}\n          />\n        </div>\n        <div className=\"input__container\">\n          <input\n            required\n            className=\"input\"\n            type=\"password\"\n            autoComplete=\"current-password\"\n            value={password}\n            placeholder=\"password\"\n            onChange={e => setPassword(e.target.value)}\n          />\n          <div className=\"input__error\">{signupErrorMessage}</div>\n        </div>\n        <input type=\"submit\" value=\"Sign up\" />\n      </form>\n    </>\n  );\n};\n\nexport default Signup;\n","import React from \"react\";\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Navbar from \"./components/Navbar\";\nimport TodoList from \"./components/TodoList\";\nimport AuthContextProvider from \"./contexts/AuthContext\";\nimport Signup from './components/Signup';\nimport Login from './components/Login';\nimport TodoContextProvider from \"./contexts/TodoContext\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Router>\n        <AuthContextProvider>\n        <TodoContextProvider>\n          <Navbar />\n          <Switch>\n            <Route exact path=\"/\" component={TodoList} />\n            <Route path=\"/signup\" component={Signup} />\n            <Route path=\"/login\" component={Login} />\n          </Switch>\n          </TodoContextProvider>\n        </AuthContextProvider>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}